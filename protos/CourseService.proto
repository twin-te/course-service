syntax="proto3";

service CourseService {
  /* kdbから最新の情報を取得し、データベースを更新する */
  rpc UpdateCourseDatabase(UpdateCourseDatabaseRequest) returns (UpdateCourseDatabaseResponse);
  /* 指定されたidの講義情報を取得する */
  rpc GetCourses(GetCoursesRequest) returns (GetCoursesResponse);
  /* 指定されたcodeの講義情報を取得する */
  rpc GetCoursesByCode(GetCoursesByCodeRequest) returns (GetCoursesByCodeResponse);
  /* データベースが持つ全てのコースを取得する */
  rpc ListAllCourses(ListAllCoursesRequest) returns (ListAllCoursesResponse);

  rpc SearchCourse(SearchCourseRequest) returns (SearchCourseResponse);
}

enum Module {
  SpringA = 0;
  SpringB = 1;
  SpringC = 2;
  FallA = 3;
  FallB = 4;
  FallC = 5;
  SummerVacation = 6;
  SpringVacation = 7;
  Annual = 8;
  UnknownModule = 9;
}

enum Day { 
  Sun = 0;
  Mon = 1;
  Tue = 2;
  Wed = 3;
  Thu = 4;
  Fri = 5;
  Sat = 6;
  Intensive = 7;
  Appointment = 8;
  AnyTime = 9;
  UnknownDay = 10;
}

message UpdateCourseDatabaseRequest {
  int32 year = 1; // 対象年度
  bool mandatory = 2; //強制更新
}

message UpdateCourseDatabaseResponse {
  repeated ReportCourseData insertedCourses = 1; // 新たに追加された講義
  repeated ReportCourseData updatedCourses = 2; // 内容が更新された講義
}

message ReportCourseData {
  string id = 1;
  string code = 2;
  string name = 3;
}

message CourseSchedule {
  Module module = 1;
  Day day = 2;
  int32 period = 3;
  string room = 4;
}

message Course {
  enum CourseMethod {
    OnlineAsynchronous = 0;
    OnlineSynchronous = 1;
    FaceToFace = 2;
    Others = 3;
  } 
  string id = 1;
  int32 year = 2;
  string code = 3;
  string name = 4;
  string instructor = 5;
  float credit = 6;
  string overview = 7;
  string remarks = 8;
  string lastUpdate = 9;
  repeated int32 recommendedGrades = 10;
  repeated CourseMethod methods = 11;
  repeated CourseSchedule schedules = 12;
  bool hasParseError = 13; // パースエラーが発生した場合（情報の信憑性が薄い場合）trueになる
}

message GetCoursesRequest {
  repeated string ids = 1;
}

message GetCoursesResponse {
  repeated Course courses = 1;
}

message GetCoursesByCodeRequestCondition {
  int32 year = 1;
  string code = 2;
}

message GetCoursesByCodeRequest {
  repeated GetCoursesByCodeRequestCondition conditions = 1;
  /* 一部の講義が見つからない場合でもエラーにせず、見つかった分だけ返す */
  bool suppressNotFoundError = 2;
}

message GetCoursesByCodeResponse {
  repeated Course courses = 1;
}

message ListAllCoursesRequest {}

message ListAllCoursesResponse {
  repeated Course courses = 1;
}

message SearchCourseRequestPeriods {
  repeated int32 periods = 1;
}

message SearchCourseRequestModules {
  repeated bool Sun = 1;
  repeated bool Mon = 2;
  repeated bool Tue = 3;
  repeated bool Wed = 4;
  repeated bool Thu = 5;
  repeated bool Fri = 6;
  repeated bool Sat = 7;
  repeated bool Intensive = 8;
  repeated bool Appointment = 9;
  repeated bool AnyTime = 10;
}

message SearchCourseRequestTimetable {
  SearchCourseRequestModules SpringA = 1;
  SearchCourseRequestModules SpringB = 2;
  SearchCourseRequestModules SpringC = 3;
  SearchCourseRequestModules FallA = 4;
  SearchCourseRequestModules FallB = 5;
  SearchCourseRequestModules FallC = 6;
  SearchCourseRequestModules SummerVacation = 7;
  SearchCourseRequestModules SpringVacation = 8;
}

message SearchCourseRequest {
  int32 year = 1;
  repeated string keywords = 2;
  SearchCourseRequestTimetable timetable = 3;
  enum SearchMode {
    Cover = 0;
    Contain = 1;
  }
  SearchMode searchMode = 4;
  int32 limit = 5;
  int32 offset = 6;
}

message SearchCourseResponse {
  repeated Course courses = 1;
}